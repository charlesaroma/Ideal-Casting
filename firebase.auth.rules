rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow anyone to create their own user document during signup
    match /users/{userId} {
      allow create: if request.auth != null && (
        request.auth.uid == userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow read, update: if request.auth != null && (
        request.auth.uid == userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow delete: if isAdmin();
    }
    
    // Allow public read access to talents, but only admins can modify
    match /talents/{talentId} {
      allow read: if true;  // Keep public read access
      allow create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow anyone to create booking requests, but restrict read/update access
    match /bookingRequests/{bookingId} {
      allow create: if true;  // Anyone can create a booking request
      allow read: if request.auth != null && (
        isAdmin() || 
        request.auth.uid == resource.data.requestedBy.userId
      );
      allow update: if request.auth != null && isAdmin();  // Only admins can update status
    }
  }
} 