rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is talent
    function isTalent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'talent';
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow delete: if isAdmin();
    }

    // Talents collection rules
    match /talents/{talentId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isTalent() && request.auth.uid == resource.data.userId);
      allow delete: if isAdmin();
    }

    // Allow authenticated users to read talents, but only admins can modify
    match /bookingRequests/{bookingId} {
      allow create: if true;  // Anyone can create a booking request
      allow read: if request.auth != null && (
        isAdmin() || 
        request.auth.uid == resource.data.requestedBy.userId
      );
      allow update: if request.auth != null && isAdmin();  // Only admins can update status
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 